/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 * Permission is hereby granted, free of charge, to any person
 * or organization obtaining a copy of the software and
 * accompanying documentation covered by this license
 * (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative
 * works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement,
 * including the above license grant, this restriction and the following
 * disclaimer, must be included in all copies of the Software, in whole or
 * in part, and all derivative works of the Software, unless such copies
 * or derivative works are solely in the form of machine-executable
 * object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
 * NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
 * DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
 * WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include <istream>
#include <ostream>
#include <math.h>

#include "../bigint.hpp"

namespace libbig
{
    largeInt largeInt::operator*(const largeInt &next_number) {

        int i, j, k, carry;

        const int length_x { this->number.length() };
        const int length_y { next_number.number.length() };
        int append_zeroes { (length_x>length_y) ? length_x-length_y: length_y-length_x };

        std::string zeroes;

        for(i=0; i<append_zeroes; i++)
            zeroes.append("0");

        std::string x { ((length_x-length_y) > 0) ? this->number:zeroes.append(this->number) };
        std::string y { ((length_y-length_x) > 0) ? next_number.number:zeroes.append(next_number.number) };

        largeInt x1 (x.substr(0, x.length()/2) );
        largeInt x2 (x.substr((x.length()/2) +1, x.length() -1) );
        largeInt y1 (y.substr(0, y.length()/2) );
        largeInt y2 (y.substr((y.length()/2) +1, y.length() -1) );
        largeInt x3 = x1 + x2;
        largeInt y3 = y1 + y2;

        largeInt x1y1, x2y2, x3y3, adder[x.length()/2 + 1];

        // for x1y1

        for(i=((x.length()/2) - 1); i>=0; i--) {
            for(j=(y.length()/2) - 1; j>=0; j--) {
                int number { (x1.number[i] - 48 ) * (y1.number[j] - 48) };
                adder[i].number.push_back(number%10 + 48);
                carry = number/10;
            }            
            for(k=0; k<(x.length()/2) - 1 - i; k++)
                adder[i].number.append("0");
        }
        for(i=0; i<x.length()/2; i++) {
            x1y1 = x1y1 + adder[i];
            adder[i].number = "";
        }
        for(i=0; i<(x.length() - (x.length()/2) - 1)*2; i++)
            x1y1.number.append("0");
        
        //for x2y2

        for(i=x2.number.length() - 1; i>=0; i--) {
            for(j=y2.number.length() - 1; j>=0; j--) {
                int number { (x2.number[i] - 48 ) * (y2.number[j] - 48) };
                adder[i].number.push_back(number%10 + 48);
                carry = number/10;
            }            
            for(k=0; k<(x.length()/2) - 1 - i; k++)
                adder[i].number.append("0");
        }
        for(i=0; i<x2.number.length(); i++) {
            x2y2 = x2y2 + adder[i];
            adder[i].number = "";
        } 

        // for x3y3 

        for(i=x3.number.length() - 1; i>=0; i--) {
            for(j=y3.number.length() - 1; j>=0; j--) {
                int number { (x3.number[i] - 48 ) * (y3.number[j] - 48) };
                adder[i].number.push_back(number%10 + 48);
                carry = number/10;
            }
            for(k=0; k<(x.length()/2) - 1 - i; k++)
                adder[i].number.append("0");
        }
        for(i=0; i<x3.number.length(); i++) {
            x3y3 = x3y3 + adder[i];
            adder[i].number = "";
        }
        x3y3 = x3y3 - x1y1 - x2y2;
        for(i=0; i<(x.length() - (x.length()/2) - 1); i++)
            x3y3.number.append("0");

        return x1y1 + x2y2 + x3y3;
    }
} // namespace libbig
