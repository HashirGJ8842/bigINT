/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 * Permission is hereby granted, free of charge, to any person
 * or organization obtaining a copy of the software and
 * accompanying documentation covered by this license
 * (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative
 * works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement,
 * including the above license grant, this restriction and the following
 * disclaimer, must be included in all copies of the Software, in whole or
 * in part, and all derivative works of the Software, unless such copies
 * or derivative works are solely in the form of machine-executable
 * object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
 * NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
 * DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
 * WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include <istream>
#include <ostream>
#include <math.h>
#include <bigint.hpp>
#include <algorithm>

namespace libbig
{
    largeInt largeInt::operator*(const largeInt &next_number) {

        auto simple_multiplication = [](const largeInt &x, const largeInt &y) {
            largeInt x1 = x;
            largeInt x2 = y;
            largeInt adder;
            largeInt Answer(0);

            int carry { 0 }, temp, f=1, k;
            std::string::reverse_iterator i, j;
            for(i=x1.number.rbegin(); i!=x1.number.rend(); i++) {
                for(j=x2.number.rbegin(); j!=x2.number.rend(); j++) {
                    temp = (*i - 48) * (*j - 48) + carry;
                    carry = temp/10;
                    adder.number.push_back(temp%10 + 48);
                }
                if(carry) {
                    adder.number.push_back(carry + 48);
                    carry = 0;
                }
                std::reverse(adder.number.begin(), adder.number.end());
                //std::cout<<"Before Adder = "<<adder<<std::endl;
                for(k=f; k != 1; k/=10) {
                    adder.number.push_back('0');
                }
                //std::cout<<"adder = "<<adder<<"Answer = "<<Answer<<"\n";
                Answer = Answer + adder;
                adder = largeInt();
                f *= 10;
            }
            return Answer;
        };
        return simple_multiplication(*this, next_number);
    }


} // namespace libbig
