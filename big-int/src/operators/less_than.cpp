/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 * Permission is hereby granted, free of charge, to any person
 * or organization obtaining a copy of the software and
 * accompanying documentation covered by this license
 * (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative
 * works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement,
 * including the above license grant, this restriction and the following
 * disclaimer, must be included in all copies of the Software, in whole or
 * in part, and all derivative works of the Software, unless such copies
 * or derivative works are solely in the form of machine-executable
 * object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
 * NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
 * DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
 * WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include <istream>
#include <ostream>

#include "../bigint.hpp"

namespace libbig
{
  /**
   * This operator returns a bool value which is
   * 1 when the < condition is satisfied between the two largeInt objects
   * 0 otherwise
   *
   */
  bool largeInt::operator<(const largeInt &a)
  {
    /**
     * If first number is negative and second number is positive
     * then < condition is satisfied.
     *
     */
    if(this->sign == NEGATIVE && a.sign == POSITIVE)
    {
      return true;
    }

    /**
     * If first number is positive and second number is negative
     * then < condition is not satisfied.
     *
     */
    if(a.sign == NEGATIVE && this->sign == POSITIVE)
    {
      return false;
    }

    /**
     * If both the numbers have same sign
     * then comparing their lengths
     *
     */
    if(this->number.length() > a.number.length())
    {
      /** 
       * if first number is longer and both are negative then the
       * condition is not satisfied, but if first number is longer
       * and both are positive then the condition is satisfied.
       *
       */
      return 1^this->sign;
    }
    if(this->number.length() < a.number.length())
    {
      /**
       * if first number is shorter and both are negative then the
       * condition is satisfied, but if first number is shorter and
       * both are positive then the condition is not satisfied.
       *
       */
      return 0^this->sign;
    }

    /**
     * if the length of both numbers are same then we compare each digit
     * from LTR and the first non equal digit can determine whether the
     * condition is satisfied
     *
     */
    for(int i=0;i<a.number.length();i++)
    {
      if(this->number[i]<a.number[i])
      {
        return !(1^this->sign);
      }
      if(this->number[i]>a.number[i])
      {
        return !(0^this->sign);
      }
    }
    return false;
  }
} // namespace libbig
